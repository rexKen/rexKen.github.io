{"title":"async函数的使用","date":"2019-04-29T07:39:23.000Z","slug":"async","tags":["ES"],"updated":"2019-05-07T08:08:34.000Z","content":"<h1 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h1><h2 id=\"什么是-async-函数？\"><a href=\"#什么是-async-函数？\" class=\"headerlink\" title=\"什么是 async 函数？\"></a>什么是 async 函数？</h2><p>谈及异步回调函数的嵌套，总会让人感到烦躁，特别是当业务逻辑复杂，往往需要调用几次 ajax 才能拿到所有需要的数据。</p>\n<p>从最早的回调函数，到 Promise 对象，再到 Generator 函数，每次都有所改进，但又让人觉得不彻底。它们都有额外的复杂性，都需要理解抽象的底层运行机制。所以，我们需要一种方法，更优雅地解决异步操作。于是，async函数出现了。</p>\n<p>通过另外一篇文章我们已经可以知道Generator函数在详细使用的时候是如此的复杂。async函数优势在哪里。其实我们可以用一句话概括的。</p>\n<p>async函数，就是Generator的语法糖</p>\n<p>它有这么多个特点</p>\n<ul>\n<li>建立在 promise 之上。所以，不能把它和回调函数搭配使用。但它会声明一个异步函数，并隐式地返回一个Promise。因此可以直接return变量，无需使用 Promise.resolve 进行转换。</li>\n<li>和 promise 一样，是非阻塞的。但不用写 then 及其回调函数，这减少代码行数，也避免了代码嵌套。而且，所有异步调用，可以写在同一个代码块中，无需定义多余的中间变量。</li>\n<li>它的最大价值在于，可以使异步代码，在形式上，更接近于同步代码。</li>\n<li>它总是与 await 一起使用的。并且，await 只能在 async 函数体内。</li>\n<li>await 是个运算符，用于组成表达式，它会阻塞后面的代码。如果等到的是 Promise 对象，则得到其 resolve 值。否则，会得到一个表达式的运算结果。</li>\n</ul>\n","prev":{"title":"Generator 函数","slug":"Generator"},"next":{"title":"React高阶组件","slug":"HOC"},"link":"https://rexken.github.io/post/async/","toc":[{"title":"async函数","id":"async函数","index":"1","children":[{"title":"什么是 async 函数？","id":"什么是-async-函数？","index":"1.1"}]}]}