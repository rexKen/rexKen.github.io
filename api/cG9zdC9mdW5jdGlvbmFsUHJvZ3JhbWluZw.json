{"title":"如何理解函数式编程","date":"2019-04-25T10:43:45.000Z","slug":"functionalPrograming","tags":["React"],"updated":"2019-04-25T10:49:32.000Z","content":"<h1 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h1><p>要理解函数式编程，我们需要从原理上重新认识函数和纯函数。</p>\n<h2 id=\"什么是函数\"><a href=\"#什么是函数\" class=\"headerlink\" title=\"什么是函数\"></a>什么是函数</h2><p>函数(function)这个名词来自于数学，函数通过一个给定的值，计算出另外一个值，也就是上学时常见的f(x)，如下几类在代码中函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//伪代码 函数无入参，返回2</span></span><br><span class=\"line\">def f1(): <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//函数有参数x，返回 x+1</span></span><br><span class=\"line\">def f2(int x): <span class=\"keyword\">return</span> x+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//函数无入参，无返回值，打印hello world</span></span><br><span class=\"line\">def f3(): print(<span class=\"string\">\"hello world\"</span>)</span><br></pre></td></tr></table></figure>\n<p>以上3种都可以称之为函数，但在实际的编程中。函数（function）和procedure是有区别的：函数（function)通过运算返回一个值(比如f1, f2)、而procedure只是执行了一段代码(比如f3)，没有返回值。两者是有明确区分的。</p>\n<h2 id=\"什么是纯函数（Pure-Function\"><a href=\"#什么是纯函数（Pure-Function\" class=\"headerlink\" title=\"什么是纯函数（Pure Function)\"></a>什么是纯函数（Pure Function)</h2><p>满足有以下两个条件的函数我们称之为纯函数，即是Pure Function:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 函数不会产生side effect(no side effect)</span><br><span class=\"line\">2. 函数满足referential transparency这个条件</span><br></pre></td></tr></table></figure>\n<h3 id=\"Side-effect\"><a href=\"#Side-effect\" class=\"headerlink\" title=\"Side effect\"></a>Side effect</h3><p>函数调用以后不会对外部状态产生影响，如下面这段代码中sum函数就是没有对外部产生影响的no side effect:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def sum(a,b): <span class=\"keyword\">return</span> a+b</span><br></pre></td></tr></table></figure>\n<p>而以下这种函数的代码则是会产生side effect的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0</span><br><span class=\"line\">def plus(a,b)&#123;</span><br><span class=\"line\">  sum = a + b</span><br><span class=\"line\">  return sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，plus方法不仅仅计算传入的参数a+b，同时把得出的值，return 到外部作用域中的sum，改变了外部变量sum的值，我们就称这个plus函数产生了side effect</p>\n<h5 id=\"常见的Side-effect\"><a href=\"#常见的Side-effect\" class=\"headerlink\" title=\"常见的Side effect\"></a>常见的Side effect</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 改变外部变量的值（上面的例子中plus函数）</span><br><span class=\"line\">2. 像磁盘中写入数据</span><br><span class=\"line\">3. 将页面上的一个按钮设置为可点击，或者不可点击</span><br></pre></td></tr></table></figure>\n<p>从Side effect这个角度上来讲， Pure Function不会产生side effect， procedure通常会产生side effect</p>\n<h3 id=\"Referential-transparency\"><a href=\"#Referential-transparency\" class=\"headerlink\" title=\"Referential transparency\"></a>Referential transparency</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referential transparency means that given a function and an input value, you will always receive the same output. That is to say there is no external state used in the function.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referential transparency means that you can replace anyexpression <span class=\"keyword\">in</span> the program with the result of evaluating that expression (or vice versa) without changing the meaning of the program.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>满足Referential Transparency的函数可以将可以将用函数计算的结果替换表达式本身，而不影响程序的逻辑。</li>\n<li>给定指定的参数，在任何时候返回的值都是相同的。不受其他外部条件影响。</li>\n</ul>\n<p>这个两句关于Referential transparency都是合理的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f(): return 2</span><br><span class=\"line\"></span><br><span class=\"line\">print(f() + f())</span><br><span class=\"line\">print(2)</span><br></pre></td></tr></table></figure>\n<p>以下是不合理的情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int counter = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">def f(x)&#123;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + counter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>) + f(<span class=\"number\">1</span>)  <span class=\"comment\">//代码结果是3</span></span><br><span class=\"line\">f(<span class=\"number\">1</span>) + <span class=\"number\">1</span> <span class=\"comment\">//代码结果是5</span></span><br></pre></td></tr></table></figure>\n<p>所以，pure function的定义式</p>\n<ul>\n<li>No side effect</li>\n<li>Referential transparency</li>\n</ul>\n<p>满足以上两个条件的函数，我们称之为pure function</p>\n<h2 id=\"什么是函数式编程（functional-programing）\"><a href=\"#什么是函数式编程（functional-programing）\" class=\"headerlink\" title=\"什么是函数式编程（functional programing）\"></a>什么是函数式编程（functional programing）</h2><p>函数式编程最大限度的写pure function，让函数最大限度的减少side effect ，并且保证函数在任何时候传递相同的参数，的到结果都相同</p>\n<h4 id=\"函数式编程的意义\"><a href=\"#函数式编程的意义\" class=\"headerlink\" title=\"函数式编程的意义\"></a>函数式编程的意义</h4><p>但我们尽可能地使用函数式编程的思想写程序时，程序具有天然的模块属性，因为pure function 的互相组装不会产生相互影响。pure function 不产生side effect ，不需要对外状况的状态产生顾虑。</p>\n<p>文章参考：<a href=\"https://juejin.im/post/5a69fe4bf265da3e393a9f4b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a69fe4bf265da3e393a9f4b</a></p>\n","prev":{"title":"React高阶组件","slug":"HOC"},"next":{"title":"React组件生命周期","slug":"reactLearn"},"link":"https://rexken.github.io/post/functionalPrograming/","toc":[{"title":"函数式编程","id":"函数式编程","index":"1","children":[{"title":"什么是函数","id":"什么是函数","index":"1.1"},{"title":"什么是纯函数（Pure Function)","id":"什么是纯函数（Pure-Function","index":"1.2","children":[{"title":"Side effect","id":"Side-effect","index":"1.2.1"},{"title":"Referential transparency","id":"Referential-transparency","index":"1.2.2"}]},{"title":"什么是函数式编程（functional programing）","id":"什么是函数式编程（functional-programing）","index":"1.3"}]}]}