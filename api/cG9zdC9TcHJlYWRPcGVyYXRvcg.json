{"title":"展开运算符Spread Operator","date":"2019-05-07T08:08:25.000Z","slug":"SpreadOperator","tags":["ES"],"updated":"2019-05-07T09:13:04.306Z","content":"<h1 id=\"展开运算符Spread-Operator\"><a href=\"#展开运算符Spread-Operator\" class=\"headerlink\" title=\"展开运算符Spread Operator\"></a>展开运算符Spread Operator</h1><h2 id=\"展开语法-Spread-syntax\"><a href=\"#展开语法-Spread-syntax\" class=\"headerlink\" title=\"展开语法(Spread syntax)\"></a>展开语法(Spread syntax)</h2><p> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。(<strong>译者注</strong>: 字面量一般指 <code>[1, 2, 3]</code> 或者 <code>{name: &quot;mdn&quot;}</code> 这种简洁的构造方式)</p>\n<h2 id=\"展开语法的特点\"><a href=\"#展开语法的特点\" class=\"headerlink\" title=\"展开语法的特点\"></a>展开语法的特点</h2><h4 id=\"1-不用Apply进行函数调用\"><a href=\"#1-不用Apply进行函数调用\" class=\"headerlink\" title=\"1.不用Apply进行函数调用\"></a>1.不用Apply进行函数调用</h4><p>我们通常会使用Function.prototype.apply,传递一个数组用来调用一个用数组保存做参数的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span> (<span class=\"params\">x, y, z</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Call the function, passing args</span></span><br><span class=\"line\">doStuff.apply(<span class=\"literal\">null</span>, args);</span><br></pre></td></tr></table></figure>\n<p>在我们使用spread 运算符以后，就可以避免使用 apply 方法。我们只需要在数组之前使用spread运算符调用函数即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doStuff(...args);</span><br></pre></td></tr></table></figure>\n<p>就是这么的简单。代码简短、优雅，也不需要使用没必要的的null。</p>\n<h4 id=\"2-组合数组\"><a href=\"#2-组合数组\" class=\"headerlink\" title=\"2.组合数组\"></a>2.组合数组</h4><p>组合数组的方法有很多很多种。不过展开运算符用了一种独特的方式来组合数组。</p>\n<p>一般的数组组合方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.push(...arr2) <span class=\"comment\">// Adds arr2 items to end of array</span></span><br><span class=\"line\">arr1.unshift(...arr2) <span class=\"comment\">//Adds arr2 items to beginning of array</span></span><br></pre></td></tr></table></figure>\n<p>展开运算符神奇的组合方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'one'</span>, ...arr1, <span class=\"string\">'four'</span>, <span class=\"string\">'five'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [\"one\", \"two\", \"three\", \"four\", \"five\"]</span></span><br></pre></td></tr></table></figure>\n<p>添加的位置随时可控，语法比其他的方式更短。</p>\n<h4 id=\"3-复制数组\"><a href=\"#3-复制数组\" class=\"headerlink\" title=\"3.复制数组\"></a>3.复制数组</h4><p>得到一份数组的拷贝是很常见的任务，过去我们使用<a href=\"https://link.jianshu.com/?t=https://davidwalsh.name/javascript-clone-array\" target=\"_blank\" rel=\"noopener\">Array.prototype.slice</a>来做，但现在我们可以使用展开运算符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...arr]; <span class=\"comment\">// 和arr.slice()差不多</span></span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>这里值得注意的是，数组里面的对象仍是引用值，不是所有的东西都划出内存复制过去的。</p>\n<h4 id=\"4-将-arguments-或-NodeList-转换成-Array\"><a href=\"#4-将-arguments-或-NodeList-转换成-Array\" class=\"headerlink\" title=\"4.将 arguments 或 NodeList 转换成 Array\"></a>4.将 arguments 或 NodeList 转换成 Array</h4><p>像拷贝数组一样，我们常常使用<code>Array.Prototype.slice</code>来将<code>NodeList</code>和<code>arguments</code>这种类数组对象转换为真正的数组。但是现在我们能够用展开运算符轻易的实现这项任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，<code>Array.from</code> 也能达成相同的目的</p>\n<h4 id=\"5-Math函数中使用\"><a href=\"#5-Math函数中使用\" class=\"headerlink\" title=\"5.Math函数中使用\"></a>5.Math函数中使用</h4><p>展开运算符将数组“展开”成为不同的参数，所以任何可接收任意数量的参数的函数，都能够使用展开运算符来传参。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(...numbers); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p><code>Math</code>对象的一系列的方法，正是展开运算符作为唯一参数传递给函数的完美例子。</p>\n<h4 id=\"6-解构的乐趣\"><a href=\"#6-解构的乐趣\" class=\"headerlink\" title=\"6.解构的乐趣\"></a>6.解构的乐趣</h4><p>解构是一项很棒的实践方法。能够使用解构和展开运算符将信息解压到你想要的变量中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, y, ...z &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z); <span class=\"comment\">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>剩余的属性被分配到了展开运算符之后的z变量中。</p>\n<p>ES6不仅仅使JS变得更高效，也使其更有趣。现代浏览器都已支持ES6的新语句，所以如果你还没有花时间好好把玩一番的话，那你一定要试一下。</p>\n<p>文章出处：<a href=\"https://davidwalsh.name/spread-operator\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/spread-operator</a></p>\n","next":{"title":"Generator 函数","slug":"Generator"},"link":"https://rexken.github.io/post/SpreadOperator/","toc":[{"title":"展开运算符Spread Operator","id":"展开运算符Spread-Operator","index":"1","children":[{"title":"展开语法(Spread syntax)","id":"展开语法-Spread-syntax","index":"1.1"},{"title":"展开语法的特点","id":"展开语法的特点","index":"1.2"}]}]}